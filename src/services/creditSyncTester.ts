import { CreditSyncService } from '@/services/creditSyncService';

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Credit Sync System
 * ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Console ‡∏Ç‡∏≠‡∏á browser
 */

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

// 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto Sync
async function testAutoSync() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto Sync...');
  try {
    const result = await CreditSyncService.checkAndSyncIfNeeded();
    console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error);
    return { success: false, error: error.message };
  }
}

// 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Force Sync
async function testForceSync() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Force Sync...');
  try {
    const result = await CreditSyncService.syncCreditBalance(true);
    console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error);
    return { success: false, error: error.message };
  }
}

// 3. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
async function getCurrentCredit() {
  console.log('üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...');
  try {
    const result = await CreditSyncService.getCurrentCreditBalance();
    console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error);
    return null;
  }
}

// 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Realtime Subscription
function setupRealtimeSync() {
  console.log('üì° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Realtime Sync...');
  
  const subscription = CreditSyncService.subscribeToCreditUpdates((data) => {
    console.log('üîî Credit Balance Updated!', data);
  });
  
  console.log('‚úÖ Subscription ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
  return subscription;
}

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Console
if (typeof window !== 'undefined') {
  window.testCreditSync = {
    testAutoSync,
    testForceSync,
    getCurrentCredit,
    setupRealtimeSync,
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏° - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async runAllTests() {
      console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Credit Sync System');
      
      try {
        // 1. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('\n--- 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---');
        await getCurrentCredit();
        
        // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto Sync
        console.log('\n--- 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto Sync ---');
        await testAutoSync();
        
        // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Force Sync
        console.log('\n--- 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Force Sync ---');
        await testForceSync();
        
        // 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Realtime
        console.log('\n--- 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Realtime ---');
        const sub = setupRealtimeSync();
        
        console.log('\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
        return {
          success: true,
          subscription: sub
        };
        
      } catch (error) {
        console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
        return { success: false, error: error.message };
      }
    }
  };
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  console.log(`
üîß Credit Sync System Test Functions
=====================================

‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Browser Console:

1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto Sync:
   await testCreditSync.testAutoSync()

2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Force Sync:
   await testCreditSync.testForceSync()

3. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
   await testCreditSync.getCurrentCredit()

4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Realtime Sync:
   const sub = testCreditSync.setupRealtimeSync()

5. ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
   await testCreditSync.runAllTests()

=====================================
  `);
}

export default {
  testAutoSync,
  testForceSync,
  getCurrentCredit,
  setupRealtimeSync
};