import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import TermsOfService from '../TermsOfService';
import { generateLegalDocumentPDF } from '@/lib/pdfGenerator';

// Mock window methods
const mockOpen = vi.fn();
const mockPrint = vi.fn();
const mockAlert = vi.fn();

Object.defineProperty(window, 'open', {
  writable: true,
  value: mockOpen,
});

Object.defineProperty(window, 'print', {
  writable: true,
  value: mockPrint,
});

Object.defineProperty(window, 'alert', {
  writable: true,
  value: mockAlert,
});

// Mock scrollIntoView
Element.prototype.scrollIntoView = vi.fn();

// Mock PDF generator
vi.mock('@/lib/pdfGenerator', () => ({
  generateLegalDocumentPDF: vi.fn(),
}));

// Mock Navigation and Footer components
vi.mock('@/components/Navigation', () => ({
  default: () => <nav data-testid="navigation">Navigation</nav>,
}));

vi.mock('@/components/Footer', () => ({
  default: () => <footer data-testid="footer">Footer</footer>,
}));

describe('TermsOfService', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders the component correctly', () => {
    render(<TermsOfService />);

    // Check main heading
    expect(screen.getByRole('heading', { name: '‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' })).toBeInTheDocument();
    expect(screen.getByText('‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå smsup-plus')).toBeInTheDocument();

    // Check navigation and footer are rendered
    expect(screen.getByTestId('navigation')).toBeInTheDocument();
    expect(screen.getByTestId('footer')).toBeInTheDocument();

    // Check skip link for accessibility
    expect(screen.getByText('‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å')).toBeInTheDocument();
  });

  it('displays all navigation sections', () => {
    render(<TermsOfService />);

    const sections = [
      '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°',
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
      '‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤',
      '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°',
      '‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
      '‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î',
      '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
      '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
    ];

    sections.forEach(section => {
      const elements = screen.getAllByText(section);
      expect(elements.length).toBeGreaterThan(0);
    });
  });

  it('shows mobile navigation on small screens', () => {
    render(<TermsOfService />);

    // Check if mobile navigation exists - look for the heading in mobile nav
    const mobileNavCards = screen.getAllByRole('heading', { name: '‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç' });
    expect(mobileNavCards.length).toBeGreaterThan(0);
  });

  it('displays summary information', () => {
    render(<TermsOfService />);

    expect(screen.getByText('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç')).toBeInTheDocument();
    expect(screen.getByText(/‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 18 ‡∏õ‡∏µ/)).toBeInTheDocument();
    expect(screen.getByText(/‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á/)).toBeInTheDocument();
    expect(screen.getByText(/‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ú‡∏¥‡∏î‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢/)).toBeInTheDocument();
  });

  it('renders all content sections', () => {
    render(<TermsOfService />);

    // Check section headings
    expect(screen.getByText('1. ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°')).toBeInTheDocument();
    expect(screen.getByText('2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')).toBeInTheDocument();
    expect(screen.getByText('3. ‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤')).toBeInTheDocument();
    expect(screen.getByText('4. ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°')).toBeInTheDocument();
    expect(screen.getByText('5. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')).toBeInTheDocument();
    expect(screen.getByText('6. ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î')).toBeInTheDocument();
    expect(screen.getByText('7. ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')).toBeInTheDocument();
    expect(screen.getByText('8. ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î')).toBeInTheDocument();
  });

  it('handles section navigation', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);

    // Find navigation buttons - look for buttons with specific aria-label
    const overviewButtons = screen.getAllByRole('button', { name: '‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°' });
    const overviewButton = overviewButtons[0]; // Get the first one (mobile nav)
    await user.click(overviewButton);

    // Check if scrollIntoView was called
    expect(Element.prototype.scrollIntoView).toHaveBeenCalledWith({
      behavior: 'smooth',
      block: 'start'
    });
  });

  it('handles checkbox state changes', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);

    const checkbox = screen.getByRole('checkbox', { name: /‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö/ });
    expect(checkbox).not.toBeChecked();

    await user.click(checkbox);
    expect(checkbox).toBeChecked();

    await user.click(checkbox);
    expect(checkbox).not.toBeChecked();
  });

  it('enables accept button when terms are accepted', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);

    const checkbox = screen.getByRole('checkbox', { name: /‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö/ });
    const acceptButton = screen.getByText('‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠');

    // Button should be disabled initially
    expect(acceptButton).toBeDisabled();

    // Check the checkbox
    await user.click(checkbox);

    // Button should now be enabled
    expect(acceptButton).toBeEnabled();
  });

  it('handles download PDF button click', async () => {
    const user = userEvent.setup();
    const mockGeneratePDF = vi.mocked(generateLegalDocumentPDF);

    render(<TermsOfService />);

    const downloadButton = screen.getByRole('button', { name: /‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF/i });
    await user.click(downloadButton);

    // Wait for async operations
    await new Promise(resolve => setTimeout(resolve, 200));

    expect(mockGeneratePDF).toHaveBeenCalledWith(
      expect.any(Object),
      'terms',
      '12 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025'
    );
  });

  it('handles print button click', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);

    const printButton = screen.getByRole('button', { name: /‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£/ });
    await user.click(printButton);

    expect(mockPrint).toHaveBeenCalled();
  });

  it('displays contact information correctly', () => {
    render(<TermsOfService />);

    expect(screen.getByText('SMSUP-PLUS CO., LTD.')).toBeInTheDocument();
    expect(screen.getByText('legal@smsup-plus.com')).toBeInTheDocument();
    expect(screen.getByText('02-123-4567')).toBeInTheDocument();
    expect(screen.getByText('123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10110')).toBeInTheDocument();
  });

  it('displays last updated date', () => {
    render(<TermsOfService />);

    expect(screen.getByText('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 12 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025')).toBeInTheDocument();
  });

  it('has proper accessibility attributes', () => {
    render(<TermsOfService />);

    // Check skip link
    const skipLink = screen.getByText('‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å');
    expect(skipLink).toHaveAttribute('href', '#main-content');

    // Check main content has id
    const mainContent = screen.getByText(/‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå/);
    expect(mainContent).toBeInTheDocument();
  });

  it('renders action buttons in header', () => {
    render(<TermsOfService />);

    expect(screen.getByText('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£/ })).toBeInTheDocument();
  });

  it('handles accept button click with alert', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);

    const checkbox = screen.getByRole('checkbox', { name: /‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö/ });
    const acceptButton = screen.getByText('‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠');

    // Check terms first
    await user.click(checkbox);

    // Click accept button
    await user.click(acceptButton);

    expect(mockAlert).toHaveBeenCalledWith('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
  });
});
