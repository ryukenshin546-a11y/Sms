/**
 * OTP Test Page - ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö OTP
 * Updated: September 14, 2025
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Loader2, Phone, MessageSquare, CheckCircle, XCircle, AlertTriangle, RefreshCw, Timer, Clock } from 'lucide-react';
import { edgeFunctionOTPService } from '@/services/edgeFunctionOTPService';
import { ErrorMessageService, ErrorContext } from '@/lib/errorMessages';
import { EnhancedErrorAlert, SuccessAlert, LoadingAlert } from '@/components/ui/enhanced-alert';

const OTPTestPage: React.FC = () => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [otpCode, setOtpCode] = useState('');
  const [otpId, setOtpId] = useState('');
  const [referenceCode, setReferenceCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [status, setStatus] = useState<'idle' | 'sent' | 'verified' | 'failed'>('idle');
  const [message, setMessage] = useState('');
  const [testResults, setTestResults] = useState<string[]>([]);
  
  // Resend functionality states
  const [canResend, setCanResend] = useState(false);
  const [resendCountdown, setResendCountdown] = useState(0);
  const [resendCount, setResendCount] = useState(0);
  const [maxResends, setMaxResends] = useState(3);
  const [sessionStarted, setSessionStarted] = useState(false);
  const [enhancedError, setEnhancedError] = useState<any>(null);
  const [successMessage, setSuccessMessage] = useState<any>(null);

  // Timer effect for resend countdown
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (resendCountdown > 0) {
      timer = setTimeout(() => {
        setResendCountdown(resendCountdown - 1);
      }, 1000);
    } else if (sessionStarted && resendCount < maxResends) {
      setCanResend(true);
    }
    return () => clearTimeout(timer);
  }, [resendCountdown, sessionStarted, resendCount, maxResends]);

  // Clear enhanced messages after timeout
  useEffect(() => {
    if (enhancedError) {
      const timer = setTimeout(() => setEnhancedError(null), 10000); // 10 seconds
      return () => clearTimeout(timer);
    }
  }, [enhancedError]);

  useEffect(() => {
    if (successMessage) {
      const timer = setTimeout(() => setSuccessMessage(null), 5000); // 5 seconds
      return () => clearTimeout(timer);
    }
  }, [successMessage]);

  const addResult = (result: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${result}`]);
  };

  const formatPhoneNumber = (phone: string) => {
    const numbers = phone.replace(/\D/g, '');
    if (numbers.length === 9 && !numbers.startsWith('66')) {
      return `66${numbers}`;
    }
    if (numbers.length === 10 && numbers.startsWith('0')) {
      return `66${numbers.slice(1)}`;
    }
    return numbers;
  };

  const handleSendOTP = async () => {
    if (!phoneNumber.trim()) {
      const context: ErrorContext = { action: 'send', phoneNumber };
      const error = ErrorMessageService.getEnhancedError('INVALID_PHONE_FORMAT', context);
      setEnhancedError(error);
      return;
    }

    setLoading(true);
    setMessage('');
    setEnhancedError(null);
    setSuccessMessage(null);

    try {
      addResult(`‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ${phoneNumber}`);
      
      const formattedPhone = formatPhoneNumber(phoneNumber);
      addResult(`‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${formattedPhone}`);

      const result = await edgeFunctionOTPService.sendOTP({
        phoneNumber: formattedPhone,
        userId: 'test-user-' + Date.now()
      });

      if (result.success && result.otpId && result.referenceCode) {
        setOtpId(result.otpId);
        setReferenceCode(result.referenceCode);
        setStatus('sent');
        setSessionStarted(true);
        setResendCountdown(30);
        setCanResend(false);

        // Enhanced success message
        const success = ErrorMessageService.getSuccessMessage('send', { 
          action: 'send', 
          phoneNumber: formattedPhone 
        });
        setSuccessMessage(success);
        
        addResult(`‚úÖ ‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Reference Code: ${result.referenceCode}`);
        addResult(`üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏î‡∏à‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ${result.referenceCode}`);
        if (result.session) {
          addResult(`‚è∞ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${new Date(result.session.expiresAt).toLocaleString()}`);
        }
      } else {
        setStatus('failed');
        
        // Enhanced error handling
        const context: ErrorContext = { 
          action: 'send', 
          phoneNumber: formattedPhone 
        };
        const errorCode = ErrorMessageService.mapApiErrorToCode(result);
        const error = ErrorMessageService.getEnhancedError(errorCode, context, result.message);
        setEnhancedError(error);
        
        addResult(`‚ùå ‡∏™‡πà‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.message}`);
      }
    } catch (error: any) {
      setStatus('failed');
      
      // Enhanced error handling
      const context: ErrorContext = { 
        action: 'send', 
        phoneNumber: formatPhoneNumber(phoneNumber) 
      };
      const errorCode = ErrorMessageService.mapApiErrorToCode(error);
      const enhancedError = ErrorMessageService.getEnhancedError(errorCode, context, error.message);
      setEnhancedError(enhancedError);
      
      addResult(`‚ùå Error: ${error.message}`);
      console.error('Send OTP Error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleVerifyOTP = async () => {
    if (!otpCode.trim()) {
      setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ OTP');
      return;
    }

    if (!otpId || !referenceCode) {
      setMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á OTP ‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setLoading(true);
    setMessage('');

    try {
      addResult(`‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ OTP: ${otpCode}`);

      const result = await edgeFunctionOTPService.verifyOTP({
        otpId,
        referenceCode,
        otpCode: otpCode.trim()
      });

      if (result.success) {
        setStatus('verified');
        setMessage('üéâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        addResult('üéâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        setStatus('failed');
        setMessage(`‚ùå ‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${result.message}`);
        addResult(`‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.message}`);
      }
    } catch (error) {
      setStatus('failed');
      const errorMessage = error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
      setMessage(`üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`);
      addResult(`üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const handleResendOTP = async () => {
    if (!phoneNumber || !canResend || resendCount >= maxResends) return;
    
    setIsResending(true);
    setMessage('');
    
    try {
      const formattedPhone = formatPhoneNumber(phoneNumber);
      addResult(`üîÑ ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${resendCount + 1}/${maxResends}`);
      
      // Use sendOTP for resend since we don't have a dedicated resend endpoint yet
      const result = await edgeFunctionOTPService.sendOTP({
        phoneNumber: formattedPhone,
        userId: 'test-user-resend-' + Date.now()
      });
      
      if (result.success && result.otpId && result.referenceCode) {
        // Update states for successful resend
        setOtpId(result.otpId);
        setReferenceCode(result.referenceCode);
        
        setResendCount(prev => prev + 1);
        setResendCountdown(30); // Reset countdown
        setCanResend(false);
        setMessage(`‚úÖ ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${resendCount + 1}/${maxResends})`);
        addResult(`‚úÖ ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Reference Code: ${result.referenceCode}`);
        
        // Clear previous OTP input
        setOtpCode('');
      } else {
        setMessage(`‚ùå ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ'}`);
        addResult(`‚ùå ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ'}`);
      }
    } catch (error: any) {
      setMessage(`üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥: ${error.message}`);
      addResult(`üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥: ${error.message}`);
    } finally {
      setIsResending(false);
    }
  };

  const handleCheckPhone = async () => {
    if (!phoneNumber.trim()) {
      setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
      return;
    }

    setLoading(true);
    try {
      const formattedPhone = formatPhoneNumber(phoneNumber);
      const isVerified = await edgeFunctionOTPService.isPhoneVerified(formattedPhone);
      
      if (isVerified) {
        setMessage('‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        addResult(`‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${formattedPhone} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        setMessage('‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô');
        addResult(`‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${formattedPhone} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      setMessage(`üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`);
      addResult(`üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const resetTest = () => {
    setPhoneNumber('');
    setOtpCode('');
    setOtpId('');
    setReferenceCode('');
    setStatus('idle');
    setMessage('');
    setTestResults([]);
    setSessionStarted(false);
    setCanResend(false);
    setResendCountdown(0);
    setResendCount(0);
    addResult('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
  };

  const getStatusBadge = () => {
    switch (status) {
      case 'sent':
        return <Badge variant="secondary" className="bg-blue-100 text-blue-800">OTP ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</Badge>;
      case 'verified':
        return <Badge variant="secondary" className="bg-green-100 text-green-800">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚úì</Badge>;
      case 'failed':
        return <Badge variant="destructive">‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Badge>;
      default:
        return <Badge variant="outline">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Badge>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö SMS OTP
          </h1>
          <p className="text-gray-600">
            ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          {/* Test Form */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  <Phone className="w-5 h-5" />
                  ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                </span>
                {getStatusBadge()}
              </CardTitle>
              <CardDescription>
                ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á-‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Phone Number Input */}
              <div className="space-y-2">
                <Label htmlFor="phone">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</Label>
                <Input
                  id="phone"
                  type="tel"
                  placeholder="0812345678"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  disabled={loading}
                />
                <p className="text-xs text-muted-foreground">
                  ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 0812345678, 66812345678, 812345678
                </p>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2">
                <Button 
                  onClick={handleSendOTP}
                  disabled={loading || !phoneNumber.trim()}
                  className="flex-1"
                >
                  {loading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                  ‡∏™‡πà‡∏á OTP
                </Button>
                <Button
                  onClick={handleCheckPhone}
                  disabled={loading || !phoneNumber.trim()}
                  variant="outline"
                  className="flex-1"
                >
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                </Button>
              </div>

              {/* OTP Code Input */}
              {status === 'sent' && (
                <div className="space-y-2">
                  {/* Reference Code Display */}
                  {referenceCode && (
                    <Alert>
                      <AlertTriangle className="h-4 w-4" />
                      <AlertDescription>
                        <strong>‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {referenceCode}</strong>
                        <br />
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏î‡∏à‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                      </AlertDescription>
                    </Alert>
                  )}
                  
                  <Label htmlFor="otp">‡∏£‡∏´‡∏±‡∏™ OTP</Label>
                  <Input
                    id="otp"
                    type="text"
                    placeholder="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ 4-6 ‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                    value={otpCode}
                    onChange={(e) => setOtpCode(e.target.value.replace(/\D/g, ''))}
                    disabled={loading}
                    maxLength={6}
                  />
                  <Button 
                    onClick={handleVerifyOTP}
                    disabled={loading || !otpCode.trim()}
                    className="w-full"
                  >
                    {loading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ OTP
                  </Button>
                  
                  {/* Resend Section */}
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg border">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-gray-600">‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥</span>
                      <Badge variant="outline">
                        {resendCount}/{maxResends}
                      </Badge>
                    </div>
                    
                    {/* Countdown Progress */}
                    {resendCountdown > 0 && (
                      <div className="space-y-2 mb-3">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-500">‡∏£‡∏≠ {resendCountdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                          <Clock className="w-4 h-4 text-gray-400" />
                        </div>
                        <Progress 
                          value={((30 - resendCountdown) / 30) * 100} 
                          className="h-2"
                        />
                      </div>
                    )}
                    
                    {/* Resend Button */}
                    <Button 
                      onClick={handleResendOTP}
                      disabled={!canResend || isResending || resendCount >= maxResends}
                      variant="outline"
                      size="sm"
                      className="w-full"
                    >
                      {isResending ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...
                        </>
                      ) : resendCount >= maxResends ? (
                        <>
                          <XCircle className="w-4 h-4 mr-2" />
                          ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                        </>
                      ) : !canResend ? (
                        <>
                          <Timer className="w-4 h-4 mr-2" />
                          ‡∏£‡∏≠ {resendCountdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        </>
                      ) : (
                        <>
                          <RefreshCw className="w-4 h-4 mr-2" />
                          ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              )}

              {/* Enhanced Success Message */}
              {successMessage && (
                <SuccessAlert
                  title={successMessage.title}
                  message={successMessage.message}
                  suggestion={successMessage.suggestion}
                  icon={successMessage.icon}
                  onDismiss={() => setSuccessMessage(null)}
                  className="mb-4"
                />
              )}

              {/* Enhanced Error Message */}
              {enhancedError && (
                <EnhancedErrorAlert
                  error={enhancedError}
                  onAction={(actionType) => {
                    console.log('Action clicked:', actionType);
                    // Handle action based on type
                    if (actionType === 'retry') {
                      // Retry the last action
                      if (enhancedError.context?.action === 'send') {
                        handleSendOTP();
                      }
                    } else if (actionType === 'reset') {
                      resetTest();
                    }
                    setEnhancedError(null);
                  }}
                  className="mb-4"
                />
              )}

              {/* Status Message (Legacy - keeping for compatibility) */}
              {message && !enhancedError && !successMessage && (
                <Alert className={
                  status === 'verified' ? 'border-green-200 bg-green-50' :
                  status === 'failed' ? 'border-red-200 bg-red-50' :
                  'border-blue-200 bg-blue-50'
                }>
                  {status === 'verified' ? <CheckCircle className="w-4 h-4" /> :
                   status === 'failed' ? <XCircle className="w-4 h-4" /> :
                   <AlertTriangle className="w-4 h-4" />}
                  <AlertDescription>{message}</AlertDescription>
                </Alert>
              )}

              {/* Loading State */}
              {loading && (
                <LoadingAlert
                  message={isResending ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥..." : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..."}
                  details="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
                  className="mb-4"
                />
              )}

              {/* Reset Button */}
              <Button 
                onClick={resetTest}
                variant="outline"
                className="w-full"
              >
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
              </Button>
            </CardContent>
          </Card>

          {/* Test Results Log */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="w-5 h-5" />
                Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              </CardTitle>
              <CardDescription>
                ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Real-time
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg h-96 overflow-y-auto text-sm font-mono">
                {testResults.length === 0 ? (
                  <p className="text-gray-500">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...</p>
                ) : (
                  testResults.map((result, index) => (
                    <div key={index} className="mb-1">
                      {result}
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Instructions */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</CardTitle>
          </CardHeader>
          <CardContent className="text-sm space-y-2">
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-medium mb-2">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</h4>
                <ol className="list-decimal list-inside space-y-1 text-muted-foreground">
                  <li>‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
                  <li>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏™‡πà‡∏á OTP"</li>
                  <li>‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ)</li>
                  <li>‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ OTP ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</li>
                  <li>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ OTP"</li>
                </ol>
              </div>
              <div>
                <h4 className="font-medium mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</h4>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                  <li>‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</li>
                  <li>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ</li>
                  <li>‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</li>
                  <li>‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default OTPTestPage;