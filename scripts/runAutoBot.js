// Node.js Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Auto-Bot ‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ Puppeteer
// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node scripts/runAutoBot.js

import puppeteer from 'puppeteer';

const botConfig = {
  headless: false, // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  timeout: 30000,
  baseUrl: 'https://web.smsup-plus.com'
};

// Test data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sub Account
const generateSecurePassword = () => {
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  const allChars = lowercase + uppercase + numbers + symbols;
  
  let password = '';
  
  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
  password += lowercase.charAt(Math.floor(Math.random() * lowercase.length)); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å
  password += uppercase.charAt(Math.floor(Math.random() * uppercase.length)); // ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà
  password += numbers.charAt(Math.floor(Math.random() * numbers.length));     // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  password += symbols.charAt(Math.floor(Math.random() * symbols.length));     // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
  
  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 12-16 ‡∏ï‡∏±‡∏ß
  const passwordLength = Math.floor(Math.random() * 5) + 12; // 12-16 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  for (let i = password.length; i < passwordLength; i++) {
    password += allChars.charAt(Math.floor(Math.random() * allChars.length));
  }
  
  // ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°
  return password.split('').sort(() => Math.random() - 0.5).join('');
};

const testUserData = {
  get accountName() { return this._username; },
  get username() { return this._username; },
  _username: 'test' + Math.floor(Math.random() * 1000),
  email: 'test' + Math.floor(Math.random() * 1000) + '@gmail.com',
  password: generateSecurePassword(),
  get confirmPassword() { return this.password; }, // ‡πÉ‡∏ä‡πâ getter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ password ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
};

// Admin credentials
const adminCredentials = {
  username: 'Landingpage', // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà username ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
  password: '@Atoz123'      // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà password ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
};

async function runAutoBot() {
  let browser = null;
  
  try {
    console.log('ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto-Bot Process...');
    
    // 1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    console.log('ü§ñ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...');
    browser = await puppeteer.launch({
      headless: botConfig.headless,
      defaultViewport: { width: 1366, height: 768 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // 2. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Login
    console.log('ü§ñ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ https://web.smsup-plus.com/login');
    await page.goto(`${botConfig.baseUrl}/login`, {
      waitUntil: 'networkidle2',
      timeout: botConfig.timeout
    });
    
    // 3. Login ‡∏î‡πâ‡∏ß‡∏¢ Admin Credentials
    console.log('ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password...');
    await page.waitForSelector('input', { timeout: botConfig.timeout });
    
    // ‡∏´‡∏≤ input fields ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const inputs = await page.$$('input');
    if (inputs.length >= 2) {
      await inputs[0].type(adminCredentials.username); // username field
      await inputs[1].type(adminCredentials.password); // password field
    } else {
      throw new Error('Cannot find username/password input fields');
    }
    
    console.log('ü§ñ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Login...');
    // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° submit ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ text ‡∏´‡∏£‡∏∑‡∏≠ class
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginButton = buttons.find(btn => 
        btn.textContent?.includes('Login') || 
        btn.textContent?.includes('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö') ||
        btn.type === 'submit'
      );
      if (loginButton) {
        loginButton.click();
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡πÉ‡∏ô password field
        const passwordInput = document.querySelector('input[type="password"]');
        if (passwordInput) {
          passwordInput.focus();
          const enterEvent = new KeyboardEvent('keydown', { key: 'Enter' });
          passwordInput.dispatchEvent(enterEvent);
        }
      }
    });
    await page.waitForNavigation({ waitUntil: 'networkidle2' });
    
    // 4. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Account Management
    console.log('ü§ñ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Account Management...');
    await page.goto(`${botConfig.baseUrl}/accountmanagement`, {
      waitUntil: 'networkidle2',
      timeout: botConfig.timeout
    });
    
    // 5. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö SUB ACCOUNTS
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö SUB ACCOUNTS...');
    await page.waitForSelector('div[role="tab"]', { timeout: botConfig.timeout });
    
    await page.evaluate(() => {
      const tabs = Array.from(document.querySelectorAll('div[role="tab"]'));
      const subAccountsTab = tabs.find(tab => tab.textContent?.includes('SUB ACCOUNTS'));
      if (subAccountsTab) {
        subAccountsTab.click();
      } else {
        throw new Error('SUB ACCOUNTS tab not found');
      }
    });
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 6. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account...');
    try {
      // ‡πÉ‡∏ä‡πâ selector ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
      await page.waitForSelector('#main > div:nth-child(4) > div > button', { timeout: botConfig.timeout });
      await page.click('#main > div:nth-child(4) > div > button');
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const createButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Create Account')
        );
        if (createButton) {
          createButton.click();
        } else {
          throw new Error('Create Account button not found');
        }
      });
    }
    
    // 7. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account
    console.log('ü§ñ ‡∏£‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    await page.waitForSelector('input[placeholder="Account name"]', { timeout: botConfig.timeout });
    
    console.log(`ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:`);
    console.log(`   - Account Name: ${testUserData.accountName}`);
    console.log(`   - Username: ${testUserData.username}`);
    console.log(`   - Email: ${testUserData.email}`);
    console.log(`   - Password: ${testUserData.password}`);
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ page.type() ‡πÅ‡∏ó‡∏ô evaluate
    console.log('ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sub Account ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    
    // CSS Selectors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sub Account Form
    const accountNameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(1) > input';
    const usernameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(2) > input';
    const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
    const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
    const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
    
    // ‡∏Å‡∏£‡∏≠‡∏Å Account Name
    try {
      await page.waitForSelector(accountNameSelector);
      await page.focus(accountNameSelector);
      await page.click(accountNameSelector, { clickCount: 3 });
      await page.type(accountNameSelector, testUserData.accountName);
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Account Name:', testUserData.accountName);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Account Name ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏Å Username
    try {
      await page.waitForSelector(usernameSelector);
      await page.focus(usernameSelector);
      await page.click(usernameSelector, { clickCount: 3 });
      await page.type(usernameSelector, testUserData.username);
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Username:', testUserData.username);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Username ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏Å Email
    try {
      await page.waitForSelector(emailSelector);
      await page.focus(emailSelector);
      await page.click(emailSelector, { clickCount: 3 });
      await page.type(emailSelector, testUserData.email);
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Email:', testUserData.email);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Email ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏Å Password
    try {
      await page.waitForSelector(passwordSelector);
      await page.focus(passwordSelector);
      await page.click(passwordSelector, { clickCount: 3 });
      await page.type(passwordSelector, testUserData.password);
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Password:', testUserData.password);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password
    try {
      await page.waitForSelector(confirmPasswordSelector);
      await page.focus(confirmPasswordSelector);
      await page.click(confirmPasswordSelector, { clickCount: 3 });
      await page.type(confirmPasswordSelector, testUserData.password);
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password:', testUserData.password);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF
    console.log('ü§ñ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF...');
    try {
      const subaccountOffSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(7) > div > label:nth-child(1)';
      await page.waitForSelector(subaccountOffSelector);
      await page.click(subaccountOffSelector);
      console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // 9. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏à‡∏≤‡∏Å Dropdown
    console.log('ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏à‡∏≤‡∏Å dropdown...');
    try {
      const senderDropdownSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(13) > div > div';
      await page.waitForSelector(senderDropdownSelector);
      await page.click(senderDropdownSelector);
      console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î dropdown sender ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown options ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å option ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
      await page.evaluate(() => {
        const options = Array.from(document.querySelectorAll('.ant-select-dropdown-menu-item'));
        if (options.length > 0) {
          const randomIndex = Math.floor(Math.random() * Math.min(3, options.length));
          options[randomIndex].click();
          console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å sender option:', randomIndex + 1);
        } else {
          throw new Error('Sender options not found');
        }
      });
      
      console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡∏õ‡∏¥‡∏î
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 10. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add...');
    try {
      const addButtonSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-24.ant-col-lg-24.ant-col-xl-16 > button';
      await page.waitForSelector(addButtonSelector);
      await page.click(addButtonSelector);
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Add ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const addButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Add')
        );
        if (addButton) {
          addButton.click();
        } else {
          throw new Error('Add button not found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° sender ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    await page.evaluate(() => {
      const accountNameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(1) > input';
      const usernameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(2) > input';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      
      const accountNameInput = document.querySelector(accountNameSelector);
      const usernameInput = document.querySelector(usernameSelector);
      const emailInput = document.querySelector(emailSelector);
      const passwordInput = document.querySelector(passwordSelector);
      const confirmPasswordInput = document.querySelector(confirmPasswordSelector);
      
      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account:');
      console.log('   Account Name:', accountNameInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Username:', usernameInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Email:', emailInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Password:', passwordInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Confirm Password:', confirmPasswordInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('ü§ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sub Account Form...');
    const formData = await page.evaluate(() => {
      const accountName = document.querySelector('input[placeholder="Account name"]')?.value || '';
      const username = document.querySelector('input[placeholder="Username"]')?.value || '';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const email = document.querySelector(emailSelector)?.value || '';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const password = document.querySelector(passwordSelector)?.value || '';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      const confirmPassword = document.querySelector(confirmPasswordSelector)?.value || '';
      return { accountName, username, email, password, confirmPassword };
    });
    
    console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:', formData);
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Save
    const finalFormData = await page.evaluate(() => {
      const accountName = document.querySelector('input[placeholder="Account name"]')?.value || '';
      const username = document.querySelector('input[placeholder="Username"]')?.value || '';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const email = document.querySelector(emailSelector)?.value || '';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const password = document.querySelector(passwordSelector)?.value || '';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      const confirmPassword = document.querySelector(confirmPasswordSelector)?.value || '';
      return { accountName, username, email, password, confirmPassword };
    });
    
    console.log('ü§ñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô Sub Account Form:', finalFormData);
    
    // 11. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡∏ï‡∏≤‡∏° selector ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save...');
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    try {
      // ‡πÉ‡∏ä‡πâ selector ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sub Account Save button
      await page.waitForSelector('body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-footer > div > div:nth-child(2) > button', { timeout: 5000 });
      await page.click('body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-footer > div > div:nth-child(2) > button');
      console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è Selector ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Save ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const saveButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Save')
        );
        if (saveButton) {
          saveButton.click();
          console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } else {
          throw new Error('Save button not found');
        }
      });
    }
    
    // 12. ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡πÉ‡∏ô confirmation popup
    console.log('ü§ñ ‡∏£‡∏≠ popup confirmation ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK...');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ confirmation popup ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    try {
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡∏ï‡∏≤‡∏° selector ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sub Account
      await page.waitForSelector('body > div:nth-child(9) > div > div.ant-modal-wrap.popup-question > div > div.ant-modal-content > div.ant-modal-footer > button.ant-btn.ant-btn-primary', { timeout: 5000 });
      await page.click('body > div:nth-child(9) > div > div.ant-modal-wrap.popup-question > div > div.ant-modal-content > div.ant-modal-footer > button.ant-btn.ant-btn-primary');
      console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è Selector OK ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° OK ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const okButton = buttons.find(btn => btn.textContent?.includes('OK'));
        if (okButton) {
          okButton.click();
          console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } else {
          throw new Error('OK button not found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('‚úÖ Auto-Bot ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á Sub Account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sub Account ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    console.log(`   Account Name: ${testUserData.accountName}`);
    console.log(`   Username: ${testUserData.username}`);
    console.log(`   Email: ${testUserData.email}`);
    console.log(`   Password: ${testUserData.password}`);
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    await new Promise(resolve => setTimeout(resolve, 5000));
    
  } catch (error) {
    console.error('üö´ Auto-Bot ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    if (browser) {
      await browser.close();
      console.log('ü§ñ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
  }
}

// ‡∏£‡∏±‡∏ô Auto-Bot
runAutoBot().catch(console.error);
