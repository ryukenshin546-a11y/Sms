// Optimized Node.js Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Auto-Bot ‡∏î‡πâ‡∏ß‡∏¢ Performance Improvements
// ‡πÉ‡∏ä‡πâ FLOW ‡πÅ‡∏•‡∏∞ SELECTOR ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö Original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node scripts/runAutoBotOptimized.js

import puppeteer from 'puppeteer';

const botConfig = {
  headless: false, // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
  timeout: 20000, // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 30000ms ‡πÄ‡∏õ‡πá‡∏ô 20000ms (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 33%)
  baseUrl: 'https://web.smsup-plus.com'
};

// ‚úÖ ‡πÉ‡∏ä‡πâ password generation ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö original
const generateSecurePassword = () => {
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  const allChars = lowercase + uppercase + numbers + symbols;
  
  let password = '';
  // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏ç‡πà
  password += uppercase[Math.floor(Math.random() * uppercase.length)];
  password += lowercase[Math.floor(Math.random() * lowercase.length)];
  password += numbers[Math.floor(Math.random() * numbers.length)];
  password += symbols[Math.floor(Math.random() * symbols.length)];
  
  // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 12-16 ‡∏ï‡∏±‡∏ß
  const passwordLength = 12 + Math.floor(Math.random() * 5);
  
  for (let i = password.length; i < passwordLength; i++) {
    password += allChars.charAt(Math.floor(Math.random() * allChars.length));
  }
  
  // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original - ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°
  return password.split('').sort(() => Math.random() - 0.5).join('');
};

// ‚úÖ ‡πÉ‡∏ä‡πâ test data structure ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö original
const testUserData = {
  get accountName() { return this._username; },
  get username() { return this._username; },
  _username: 'test' + Math.floor(Math.random() * 1000),
  email: 'test' + Math.floor(Math.random() * 1000) + '@gmail.com',
  password: generateSecurePassword(),
  get confirmPassword() { return this.password; },
};

// ‚úÖ ‡πÉ‡∏ä‡πâ admin credentials ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö original
const adminCredentials = {
  username: 'Landingpage',
  password: '@Atoz123'
};

async function runAutoBot() {
  let browser = null;
  
  try {
    console.log('ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto-Bot Process...');
    
    // ‚úÖ 1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° optimization flags
    console.log('ü§ñ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...');
    browser = await puppeteer.launch({
      headless: botConfig.headless,
      defaultViewport: { width: 1366, height: 768 }, // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox',
        '--disable-web-security', // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        '--disable-features=TranslateUI'  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      ]
    });
    
    const page = await browser.newPage();
    
    // ‚úÖ 2. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Login - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ https://web.smsup-plus.com/login');
    await page.goto(`${botConfig.baseUrl}/login`, {
      waitUntil: 'networkidle2', // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
      timeout: botConfig.timeout
    });
    
    // ‚úÖ 3. Login ‡∏î‡πâ‡∏ß‡∏¢ Admin Credentials - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password...');
    await page.waitForSelector('input', { timeout: botConfig.timeout });
    
    // ‚úÖ ‡∏´‡∏≤ input fields ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    const inputs = await page.$$('input');
    if (inputs.length >= 2) {
      await inputs[0].type(adminCredentials.username, { delay: 10 }); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß - delay ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
      await inputs[1].type(adminCredentials.password, { delay: 10 }); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß - delay ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
    } else {
      throw new Error('Cannot find username/password input fields');
    }
    
    console.log('ü§ñ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Login...');
    // ‚úÖ ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° submit - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginButton = buttons.find(btn => 
        btn.textContent?.includes('Login') || 
        btn.textContent?.includes('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö') ||
        btn.type === 'submit'
      );
      if (loginButton) {
        loginButton.click();
      } else {
        const passwordInput = document.querySelector('input[type="password"]');
        if (passwordInput) {
          passwordInput.focus();
          const enterEvent = new KeyboardEvent('keydown', { key: 'Enter' });
          passwordInput.dispatchEvent(enterEvent);
        }
      }
    });
    await page.waitForNavigation({ waitUntil: 'networkidle2' });
    
    // ‚úÖ 4. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Account Management - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Account Management...');
    await page.goto(`${botConfig.baseUrl}/accountmanagement`, {
      waitUntil: 'networkidle2', // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
      timeout: botConfig.timeout
    });
    
    // ‚úÖ 5. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö SUB ACCOUNTS - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö SUB ACCOUNTS...');
    await page.waitForSelector('div[role="tab"]', { timeout: botConfig.timeout });
    
    await page.evaluate(() => {
      const tabs = Array.from(document.querySelectorAll('div[role="tab"]'));
      const subAccountsTab = tabs.find(tab => tab.textContent?.includes('SUB ACCOUNTS'));
      if (subAccountsTab) {
        subAccountsTab.click();
      } else {
        throw new Error('SUB ACCOUNTS tab not found');
      }
    });
    
    // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏õ‡∏£‡∏≤‡∏Å‡∏è - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    await new Promise(resolve => setTimeout(resolve, 1000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1000ms
    
    // ‚úÖ 6. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account...');
    try {
      await page.waitForSelector('#main > div:nth-child(4) > div > button', { timeout: botConfig.timeout });
      await page.click('#main > div:nth-child(4) > div > button');
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Create Account ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const createButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Create Account')
        );
        if (createButton) {
          createButton.click();
        } else {
          throw new Error('Create Account button not found');
        }
      });
    }
    
    // ‚úÖ 7. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏£‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    await page.waitForSelector('input[placeholder="Account name"]', { timeout: botConfig.timeout });
    
    console.log(`ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:`);
    console.log(`   - Account Name: ${testUserData.accountName}`);
    console.log(`   - Username: ${testUserData.username}`);
    console.log(`   - Email: ${testUserData.email}`);
    console.log(`   - Password: ${testUserData.password}`);
    
    // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    await new Promise(resolve => setTimeout(resolve, 1000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1000ms
    
    console.log('ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sub Account ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    
    // ‚úÖ CSS Selectors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sub Account Form - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    const accountNameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(1) > input';
    const usernameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(2) > input';
    const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
    const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
    const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Account Name - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    try {
      await page.waitForSelector(accountNameSelector);
      await page.focus(accountNameSelector);
      await page.click(accountNameSelector, { clickCount: 3 });
      await page.type(accountNameSelector, testUserData.accountName, { delay: 10 }); // ‚úÖ ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Account Name:', testUserData.accountName);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Account Name ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Username - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    try {
      await page.waitForSelector(usernameSelector);
      await page.focus(usernameSelector);
      await page.click(usernameSelector, { clickCount: 3 });
      await page.type(usernameSelector, testUserData.username, { delay: 10 }); // ‚úÖ ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Username:', testUserData.username);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Username ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Email - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    try {
      await page.waitForSelector(emailSelector);
      await page.focus(emailSelector);
      await page.click(emailSelector, { clickCount: 3 });
      await page.type(emailSelector, testUserData.email, { delay: 10 }); // ‚úÖ ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Email:', testUserData.email);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Email ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Password - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    try {
      await page.waitForSelector(passwordSelector);
      await page.focus(passwordSelector);
      await page.click(passwordSelector, { clickCount: 3 });
      await page.type(passwordSelector, testUserData.password, { delay: 10 }); // ‚úÖ ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Password:', testUserData.password);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    try {
      await page.waitForSelector(confirmPasswordSelector);
      await page.focus(confirmPasswordSelector);
      await page.click(confirmPasswordSelector, { clickCount: 3 });
      await page.type(confirmPasswordSelector, testUserData.password, { delay: 10 }); // ‚úÖ ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password:', testUserData.password);
    } catch (error) {
      console.error('‚ùå ‡∏Å‡∏£‡∏≠‡∏Å Confirm Password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    await new Promise(resolve => setTimeout(resolve, 800)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1500ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 800ms
    
    // ‚úÖ 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF...');
    try {
      const subaccountOffSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(7) > div > label:nth-child(1)';
      await page.waitForSelector(subaccountOffSelector);
      await page.click(subaccountOffSelector);
      console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡πÄ‡∏õ‡πá‡∏ô OFF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Create Subaccount ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ 9. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏à‡∏≤‡∏Å Dropdown - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏à‡∏≤‡∏Å dropdown...');
    try {
      const senderDropdownSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(13) > div > div';
      await page.waitForSelector(senderDropdownSelector);
      await page.click(senderDropdownSelector);
      console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î dropdown sender ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown options ‡∏õ‡∏£‡∏≤‡∏Å‡∏è - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      await new Promise(resolve => setTimeout(resolve, 800)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1500ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 800ms
      
      // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å option ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
      await page.evaluate(() => {
        const options = Array.from(document.querySelectorAll('.ant-select-dropdown-menu-item'));
        if (options.length > 0) {
          const randomIndex = Math.floor(Math.random() * Math.min(3, options.length));
          options[randomIndex].click();
          console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å sender option:', randomIndex + 1);
        } else {
          throw new Error('Sender options not found');
        }
      });
      
      console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sender ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    }
    
    // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡∏õ‡∏¥‡∏î - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    await new Promise(resolve => setTimeout(resolve, 500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 500ms
    
    // ‚úÖ 10. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add...');
    try {
      const addButtonSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-24.ant-col-lg-24.ant-col-xl-16 > button';
      await page.waitForSelector(addButtonSelector);
      await page.click(addButtonSelector);
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Add ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const addButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Add')
        );
        if (addButton) {
          addButton.click();
        } else {
          throw new Error('Add button not found');
        }
      });
    }
    
    // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° sender ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original ‡πÅ‡∏ï‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    await new Promise(resolve => setTimeout(resolve, 800)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1500ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 800ms
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô original)
    await page.evaluate(() => {
      const accountNameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(1) > input';
      const usernameSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(2) > input';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      
      const accountNameInput = document.querySelector(accountNameSelector);
      const usernameInput = document.querySelector(usernameSelector);
      const emailInput = document.querySelector(emailSelector);
      const passwordInput = document.querySelector(passwordSelector);
      const confirmPasswordInput = document.querySelector(confirmPasswordSelector);
      
      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account:');
      console.log('   Account Name:', accountNameInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Username:', usernameInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Email:', emailInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Password:', passwordInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
      console.log('   Confirm Password:', confirmPasswordInput?.value || '‡∏ß‡πà‡∏≤‡∏á');
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('ü§ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sub Account Form...');
    const formData = await page.evaluate(() => {
      const accountName = document.querySelector('input[placeholder="Account name"]')?.value || '';
      const username = document.querySelector('input[placeholder="Username"]')?.value || '';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const email = document.querySelector(emailSelector)?.value || '';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const password = document.querySelector(passwordSelector)?.value || '';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      const confirmPassword = document.querySelector(confirmPasswordSelector)?.value || '';
      return { accountName, username, email, password, confirmPassword };
    });
    
    console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Sub Account ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:', formData);
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 500ms
    
    console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Save
    const finalFormData = await page.evaluate(() => {
      const accountName = document.querySelector('input[placeholder="Account name"]')?.value || '';
      const username = document.querySelector('input[placeholder="Username"]')?.value || '';
      const emailSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(4) > input';
      const email = document.querySelector(emailSelector)?.value || '';
      const passwordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(5) > span > input';
      const password = document.querySelector(passwordSelector)?.value || '';
      const confirmPasswordSelector = 'body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-body > div > div > div > div:nth-child(6) > span > input';
      const confirmPassword = document.querySelector(confirmPasswordSelector)?.value || '';
      return { accountName, username, email, password, confirmPassword };
    });
    
    console.log('ü§ñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô Sub Account Form:', finalFormData);
    
    // 11. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡∏ï‡∏≤‡∏° selector ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save...');
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 500ms
    
    try {
      await page.waitForSelector('body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-footer > div > div:nth-child(2) > button', { timeout: 5000 });
      await page.click('body > div:nth-child(6) > div > div.ant-modal-wrap > div > div.ant-modal-content > div.ant-modal-footer > div > div:nth-child(2) > button');
      console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è Selector ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const saveButton = buttons.find(btn => 
          btn.querySelector('.fa-plus-circle') && 
          btn.textContent?.includes('Save')
        );
        if (saveButton) {
          saveButton.click();
          console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } else {
          throw new Error('Save button not found');
        }
      });
    }
    
    // 12. ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡πÉ‡∏ô confirmation popup
    console.log('ü§ñ ‡∏£‡∏≠ popup confirmation ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK...');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ confirmation popup ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2000ms
    
    try {
      await page.waitForSelector('body > div:nth-child(9) > div > div.ant-modal-wrap.popup-question > div > div.ant-modal-content > div.ant-modal-footer > button.ant-btn.ant-btn-primary', { timeout: 5000 });
      await page.click('body > div:nth-child(9) > div > div.ant-modal-wrap.popup-question > div > div.ant-modal-content > div.ant-modal-footer > button.ant-btn.ant-btn-primary');
      console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector)');
    } catch (error) {
      console.log('‚ö†Ô∏è Selector OK ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button.ant-btn.ant-btn-primary'));
        const okButton = buttons.find(btn => btn.textContent?.includes('OK'));
        if (okButton) {
          okButton.click();
          console.log('‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° OK ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } else {
          throw new Error('OK button not found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2000ms
    
    console.log('‚úÖ Auto-Bot ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á Sub Account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sub Account ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    console.log(`   Account Name: ${testUserData.accountName}`);
    console.log(`   Username: ${testUserData.username}`);
    console.log(`   Email: ${testUserData.email}`);
    console.log(`   Password: ${testUserData.password}`);
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    await new Promise(resolve => setTimeout(resolve, 1500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1500ms
    
    // ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏≠‡∏î CREDITS ==========
    console.log('ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏≠‡∏î Credits...');
    
    // 13. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö CREDITS MOVEMENT
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö CREDITS MOVEMENT...');
    try {
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
      await new Promise(resolve => setTimeout(resolve, 1000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1000ms
      
      await page.waitForSelector('#root > div > div > div > div > main > div > div > div.content > div > div > div > div.ant-tabs-bar.ant-tabs-top-bar > div > div > div > div > div:nth-child(1) > div:nth-child(4)', { timeout: 10000 });
      await page.click('#root > div > div > div > div > main > div > div > div.content > div > div > div > div.ant-tabs-bar.ant-tabs-top-bar > div > div > div > div > div:nth-child(1) > div:nth-child(4)');
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö CREDITS MOVEMENT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ó‡πá‡∏ö CREDITS MOVEMENT ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const tabs = Array.from(document.querySelectorAll('div[role="tab"]'));
        const creditsTab = tabs.find(tab => tab.textContent?.includes('CREDITS MOVEMENT'));
        if (creditsTab) {
          creditsTab.click();
          console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö CREDITS MOVEMENT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } else {
          throw new Error('CREDITS MOVEMENT tab not found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2000ms
    
    // 14. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Account Name ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    console.log(`ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Account Name: ${testUserData.accountName}...`);
    try {
      await page.waitForSelector('div.ant-select-selection__placeholder', { timeout: 10000 });
      
      await page.click('div.ant-select-selection__placeholder');
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å dropdown Account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      await new Promise(resolve => setTimeout(resolve, 500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 500ms
      
      await page.keyboard.type(testUserData.accountName, { delay: 20 }); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      console.log(`‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå Account Name: ${testUserData.accountName}`);
      
      await new Promise(resolve => setTimeout(resolve, 800)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1500ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 800ms
      
      await page.evaluate((accountName) => {
        const dropdownOptions = Array.from(document.querySelectorAll('.ant-select-dropdown-menu-item'));
        const targetOption = dropdownOptions.find(option => 
          option.textContent?.includes(accountName)
        );
        if (targetOption) {
          targetOption.click();
          console.log(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Account: ${accountName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
          throw new Error(`Account ${accountName} not found in dropdown`);
        }
      }, testUserData.accountName);
      
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Account ‡∏î‡πâ‡∏ß‡∏¢ Enter...');
      await page.keyboard.press('Enter');
      await new Promise(resolve => setTimeout(resolve, 500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 500ms
    }
    
    console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Account Name ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ');
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ form ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    await new Promise(resolve => setTimeout(resolve, 1000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1000ms
    
    // 15. ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Credits
    console.log('ü§ñ ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Credits: 10...');
    try {
      await page.waitForSelector('input[role="spinbutton"][placeholder="Amount Credits"]', { timeout: 10000 });
      
      await page.click('input[role="spinbutton"][placeholder="Amount Credits"]');
      
      await page.keyboard.down('Control');
      await page.keyboard.press('KeyA');
      await page.keyboard.up('Control');
      await page.keyboard.press('Delete');
      
      await page.type('input[role="spinbutton"][placeholder="Amount Credits"]', '10', { delay: 20 }); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Credits: 10 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤ input field ‡∏î‡πâ‡∏ß‡∏¢ selector ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô...');
      await page.waitForSelector('#main > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-12.ant-col-lg-12.ant-col-xl-7 > div.ant-row > div > div.ant-input-number-input-wrap > input', { timeout: 5000 });
      await page.click('#main > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-12.ant-col-lg-12.ant-col-xl-7 > div.ant-row > div > div.ant-input-number-input-wrap > input');
      
      await page.keyboard.down('Control');
      await page.keyboard.press('KeyA');
      await page.keyboard.up('Control');
      await page.keyboard.press('Delete');
      
      await page.type('#main > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-12.ant-col-lg-12.ant-col-xl-7 > div.ant-row > div > div.ant-input-number-input-wrap > input', '10', { delay: 20 });
      console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Credits: 10 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢ selector ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)');
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Save
    await new Promise(resolve => setTimeout(resolve, 1000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1000ms
    
    // 16. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Credits tab
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Credits...');
    try {
      await page.waitForSelector('#main > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-24.ant-col-lg-24.ant-col-xl-2 > div.ant-row-flex.ant-row-flex-end > button', { timeout: 10000 });
      await page.click('#main > div.ant-col.ant-col-xs-24.ant-col-sm-24.ant-col-md-24.ant-col-lg-24.ant-col-xl-2 > div.ant-row-flex.ant-row-flex-end > button');
      console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Credits ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Credits ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      await page.evaluate(() => {
        const saveButtonContainer = document.querySelector('#main .ant-row-flex.ant-row-flex-end');
        if (saveButtonContainer) {
          const saveButton = saveButtonContainer.querySelector('button.ant-btn.ant-btn-primary');
          if (saveButton) {
            saveButton.click();
            console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Credits ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
          } else {
            throw new Error('Save button in Credits section not found');
          }
        } else {
          throw new Error('Save button container in Credits section not found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ confirmation popup ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    await new Promise(resolve => setTimeout(resolve, 3000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 5000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3000ms
    
    // 17. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡πÉ‡∏ô confirmation popup ‡∏Ç‡∏≠‡∏á CREDITS ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    console.log('ü§ñ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡πÉ‡∏ô confirmation popup ‡∏Ç‡∏≠‡∏á CREDITS...');
    try {
      await page.evaluate(() => {
        console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö popup ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è:');
        const modals = document.querySelectorAll('.ant-modal-wrap.popup-question');
        modals.forEach((modal, index) => {
          const content = modal.textContent || '';
          console.log(`   Modal ${index + 1}: ${content.substring(0, 100)}...`);
        });
      });
      
      const creditPopupFound = await page.evaluate(() => {
        const modals = Array.from(document.querySelectorAll('.ant-modal-wrap.popup-question'));
        
        const creditModal = modals.find(modal => {
          const content = modal.textContent?.toLowerCase() || '';
          return content.includes('credit') || 
                 content.includes('‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï') || 
                 content.includes('amount') ||
                 content.includes('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô');
        });
        
        if (creditModal) {
          const okButton = creditModal.querySelector('button.ant-btn.ant-btn-primary');
          if (okButton && okButton.textContent?.includes('OK')) {
            okButton.click();
            console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡∏Ç‡∏≠‡∏á Credits popup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            return true;
          }
        }
        return false;
      });
      
      if (!creditPopupFound) {
        throw new Error('Credits confirmation popup not found');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° OK ‡∏Ç‡∏≠‡∏á Credits ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      
      await page.evaluate(() => {
        const modals = Array.from(document.querySelectorAll('.ant-modal-wrap'));
        
        const visibleModals = modals.filter(modal => {
          const style = window.getComputedStyle(modal);
          return style.display !== 'none' && style.visibility !== 'hidden';
        });
        
        if (visibleModals.length > 0) {
          const lastModal = visibleModals[visibleModals.length - 1];
          const okButton = lastModal.querySelector('button.ant-btn.ant-btn-primary');
          
          if (okButton && okButton.textContent?.includes('OK')) {
            okButton.click();
            console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK ‡∏Ç‡∏≠‡∏á Credits popup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
          } else {
            throw new Error('OK button in Credits popup not found');
          }
        } else {
          throw new Error('No visible popup found');
        }
      });
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Credits ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2000ms
    
    console.log('üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏° Credits ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:');
    console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sub Account: ${testUserData.accountName}`);
    console.log(`   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Credits: 10 ‡∏´‡∏ô‡πà‡∏ß‡∏¢`);
    console.log(`   ‚úÖ Account ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Credits: ${testUserData.accountName}`);
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    await new Promise(resolve => setTimeout(resolve, 1500)); // ‚úÖ ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3000ms ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1500ms
    
  } catch (error) {
    console.error('üö´ Auto-Bot ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    if (browser) {
      await browser.close();
      console.log('ü§ñ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
  }
}

// ‡∏£‡∏±‡∏ô Auto-Bot
runAutoBot().catch(console.error);